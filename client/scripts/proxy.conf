server {
        listen *:443 ssl http2;

        server_name USERNAME.waaromzomoeilijk.nl;

        ssl_certificate             /etc/letsencrypt/live/waaromzomoeilijk.nl/fullchain.pem;
        ssl_certificate_key        /etc/letsencrypt/live/waaromzomoeilijk.nl/privkey.pem;

        ssl_prefer_server_ciphers on;
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_early_data on;

        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
        add_header Content-Security-Policy "upgrade-insecure-requests";

        access_log "/var/log/wzc-proxy_access_ssl_log";
        error_log "/var/log/wzc-proxy_error_log";

	location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in the Nextcloud `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 /remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /remote.php/dav/; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /index.php$request_uri;
        }

	location ^~ / {
		proxy_pass http://127.0.0.1:SSHPORT/;
	        proxy_max_temp_file_size 2048m;
	        proxy_set_header Range $http_range;
	        proxy_set_header If-Range $http_if_range;
	        proxy_ssl_session_reuse off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_redirect http://127.0.0.1:SSHPORT https://$host:443;
		
        }

}

server {
	listen 80;
	return 301 https://$host$request_uri;
}
